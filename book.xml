<?xml version="1.0"?>
<book xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0">
    <bookinfo>
        <title>Practical Guide To SubGit</title>
        <subtitle>Safe Svn to Git Migration</subtitle>
        <releaseinfo/>
        <copyright>
            <year>2012</year>
            <holder>TMate Software</holder>
        </copyright>
        <legalnotice>
            <para>This work is licensed under a <link xl:href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</link>.
            </para>
        </legalnotice>
        <author>
            <firstname>Alexander</firstname>
            <surname>Kitaev</surname>
        </author>
    </bookinfo>   

    
    <chapter id="introduction">
        <title>Overview</title>
        <para>SubGit is a tool for bidirectional Subversion and Git repositories synchronization. 
              SubGit is written in Java and works on the server side, i.e. requires direct access to both Subversion and Git repositories over local file system.
        </para>
        <para>Most commonly, SubGit user starts with Subversion repository being configured on the server. 
              Access to Subversion repository is availaibe over network (with HTTP(s), plain svn or svn over SSH protocols) and over the local file system. 
              Correspondingly, users requests are handled by Apache Web Server, svnserve daemon or sshd daemon which invokes svnserve process. 
              <xref xrefstyle="select: label" linkend="start"/> shows a generic outline of the described configuration.
       </para>               
       <para>           
           <figure id="start"><title>Common Subversion Setup</title>
           <mediaobject><imageobject><imagedata scale="105" fileref="images/start.png"/></imageobject></mediaobject>
           </figure>
        </para>
        <para>SubGit creates one or more Git repositories alongside with the existing Subversion repository and translates existing Subversion revisions into Git 
              commits. After that, SubGit configures Subversion and Git hook scripts so, that changes made in the Subversion repository are instantly translated 
              into Git repository and vice versa. <xref xrefstyle="select: label" linkend="subgit"/> shows the server with SubGit being installed. 
              SubGit grants users with a choice of using either Git or Subversion.
        </para> 
        <para>
           <figure id="subgit"><title>Server with SubGit installed</title>
           <mediaobject><imageobject><imagedata scale="115" fileref="images/subgit.png"/></imageobject></mediaobject>
           </figure>
        </para>
        <formalpara><title>Chapter summary:</title>
        <para>
        <itemizedlist>
        <listitem>SubGit needs direct access to Subversion repository over filesystem</listitem>
        <listitem>SubGit creates Git repositories and translates existing Subversion revisions into Git commits</listitem>
        <listitem>SubGit uses standard hooks mechanism to keep Subversion and Git repositories synchronized</listitem>
        <listitem>SubGit grants users with a choice of whether to use Git or Subversion</listitem>
        </itemizedlist>
        </para>
        </formalpara>
    </chapter>

    <chapter id="translation">
        <title>Translation Configuration Overview</title>
        <para>To synchronize Subversion and Git repositories, SubGit maps entities of one system to those of another. 
        For every Subversion repository the following mappings are established and used by SubGit: 
        <itemizedlist>
        <listitem>Projects in Subversion repository are mapped to the Git repositories</listitem>
        <listitem>Each project branches and tags are mapped to Git branch and tag references</listitem>
        <listitem>Subversion users are mapped to Git committers</listitem>
        </itemizedlist>
        Above mappings are static and configured for Subversion repository once before translation and synchronization is started. 
        All mappings are stored in <code>subgit.conf</code> configuration file. Following sections describe these mappings in more details.
        </para>

        <note><title>Note:</title>
        <para>
        Subversion is a very powerful system and sets mostly no limits on the repository layout. Hence, it may not be always possible to define necessary mappings 
        for any project stored in Subversion repository found out there in the wild. Such unmappable projects would not be handled by SubGit. 
        However, for most of the Subversion repositories in production use, mappings could be defined and, in most cases,
        they are detected automatically by SubGit. 
        </para>
        </note>

        <sect1 id="projects-mapping"><title>Projects mapping</title>
        <para>  
        Subversion repository may contain one or more projects. Project is a location (folder) in Subversion repository which follows Subversion recommended repository
        layout, i.e. project folder has <emphasis>trunk</emphasis>, <emphasis>branches</emphasis> and <emphasis>tags</emphasis> subfolders:
        <literallayout><code>/project
   /trunk    # project's "main line"
   /branches # contains project feature and version branches, copied from trunk or other branches
   /tags     # contains project tags (trunk and branches snapshots)</code></literallayout>
        It is not necessary for <emphasis>trunk</emphasis>, <emphasis>branches</emphasis> and <emphasis>tags</emphasis> folders to have these exact names, but the roles 
        of these folders are important. Each project could be mapped to a bare Git repository as shown
        in <xref xrefstyle="select: label" linkend="single"/> and <xref xrefstyle="select: label" linkend="multi"/> along with the corresponding 
        parts of SubGit configuration file.  
        <figure id="single"><title>Single Project Repository Mapping</title>
        <mediaobject><imageobject><imagedata scale="105" fileref="images/single.png"/></imageobject></mediaobject>
        </figure>
        <figure id="single-config"><title>SubGit configuration file (single project mapping)</title>
        <literallayout><code>        [git "default"]
        # project location within Subversion repository
        translationRoot = /
        
        # file system path of the mapped Git repository
        repository = .git</code></literallayout>
        </figure>
        <figure id="multi"><title>Multiple Projects Repository Mapping</title>
        <mediaobject><imageobject><imagedata scale="105" fileref="images/multi.png"/></imageobject></mediaobject>
        </figure>
        <figure id="multi-config"><title>SubGit configuration file (two projects mapping)</title>
        <literallayout><code>        [git "project1"]
        # project location within Subversion repository
        translationRoot = /project1
        
        # file system path of the mapped Git repository
        repository = git/project1.git
        ...
        
        [git "project2"]
        # project location within Subversion repository
        translationRoot = /project2
        
        # file system path of the mapped Git repository
        repository = git/project2.git</code></literallayout>
        </figure>
        </para></sect1>

        <sect1 id="branches-mapping"><title>Branches and Tags mapping</title>
        <para>
        For each project mapped to a Git repository, branches and tags are mapped to the corresponding references in the Git repository.
        SubGit distinguishes the following folders in Subversion project as branches or tags:
        <itemizedlist>
        <listitem>trunk folder</listitem>
        <listitem>folders in the dedicated branches folder</listitem>
        <listitem>folders in the dedicated shelves folder</listitem>
        <listitem>folders in the dedicated tags folder</listitem>
        </itemizedlist>
        </para>
        <para>Shelves are special kind of branches used by SubGit to represent Git anonymous branches in Subversion repository.</para>
        <para>
        Each folder is mapped to the reference (branch or tag) in the Git repository. For trunk folder the mapping is one-to-one as there 
        could be only one trunk folder (as well as only one master reference in Git) and for other folders wildcard mapping is used. Default mapping and 
        corresponding SubGit configuration file part is shown in <xref xrefstyle="select: label" linkend="mapping"/>  and <xref xrefstyle="select: label" linkend="mapping-config"/>.
        </para>
        <para>Whenever project uses standard folder names (i.e. trunk, branches and tags), SubGit would automatically detect and configure mapping for that project. Otherwise
        configuration would have to be manually adjusted to include proper paths and references names.</para>
        <para>  
        <figure id="mapping"><title>Default Branches and Tags Mapping</title>
        <mediaobject><imageobject><imagedata scale="80" fileref="images/mapping.png"/></imageobject></mediaobject>
        </figure>
        <figure id="mapping-config"><title>SubGit configuration file (default branches and tags mapping)</title>
        <literallayout><code>        [git "default"]
        translationRoot = /
        repository = .git
        
        # branches and tags mapping in form of
        # branchKind=Subversion-Path-Pattern:Git-Reference-Pattern
        
        trunk = trunk:refs/heads/master
        branches = branches/*:refs/heads/*
        shelves = shelves/*:refs/shelves/*
        tags = tags/*:refs/tags/*</code></literallayout>
        </figure>
        </para>
        <para>  
        Notice that project2 in <xref xrefstyle="select: label" linkend="multi"/> features
        non-standard names for <emphasis>trunk</emphasis>, <emphasis>branches</emphasis> and <emphasis>tags</emphasis> folders. <xref xrefstyle="select: label" linkend="mapping-names"/> shows
        mapping configuration for that project.
        <figure id="mapping-names"><title>SubGit configuration file (non-stadard folders names)</title>
        <literallayout><code>        [git "default"]
        translationRoot = /
        repository = .git
        
        # branches and tags mapping in form of
        # branchKind=Subversion-Path-Pattern:Git-Reference-Pattern
        
        trunk = main:refs/heads/master
        branches = versions/*:refs/heads/*
        shelves = shelves/*:refs/shelves/*
        tags = stamps/*:refs/tags/*</code></literallayout>
        </figure>
        </para>
        <para><xref xrefstyle="select: label" linkend="multi-combined"/> outlines combined project and branches mappings for two projects Subversion repository.   
        <figure id="multi-combined"><title>Project and Branches Mapping</title>
        <mediaobject><imageobject><imagedata scale="105" fileref="images/multi-combined.png"/></imageobject></mediaobject>
        </figure>
        </para>
        </sect1>
        
        <sect1 id="authors-mapping"><title>Authors Mapping</title>
        <para>By default there is no explicit authors mapping and the following rules are used for translation:
        <itemizedlist>
        <listitem>Subversion "<code>svn_user_name</code>" is translated to "<code>svn_user_name &lt;&gt;</code>" in Git</listitem>
        <listitem>Git "<code>Author Name &lt;email@domain.com&gt;</code>" is translated to "<code>Author Name</code>" in Subversion</listitem>
        </itemizedlist>
        </para>
        
        <para>
        Additionally to the default rule, explicit authors mapping may be provided by SubGit configuration. Authors mapping is stored in a separate 
        text file which is looked at <code>SVN_REPOS/conf/authors.txt</code> by default. Mapping file is read in system default encoding.   
        <figure id="authors.txt"><title>SVN_REPOS/conf/authors.txt file</title>
        <literallayout><code>svn_user_name = Git Name &lt;name@email.com&gt;</code></literallayout></figure>
        Default authors.txt location may be changed in SubGit configuration file. 
        <figure id="authors.txt"><title>SubGit configuration file defines authors.txt location</title>
        <literallayout><code>        [core]
        ...
        # location of the authors mapping file        
        authorsFile = conf/authors.txt
        ...</code></literallayout></figure>
        Authors mapping file (authors.txt) contents may be altered at any time and new mapping becomes effective immediately. 
        </para>        
        </sect1>
    </chapter>

    <chapter id="installation">
        <title>Installing SubGit into Repository</title>
        
        <sect1><title>Installation Stages</title>
        <para>To translate Subversion repository to Git and enabled synchronization, SubGit have to be installed into Subversion repository.
        SubGit installation consists of three stages: <emphasis role="bold">automatic configuration detection</emphasis>, <emphasis role="bold">configuration adjustment</emphasis> and <emphasis role="bold">installation</emphasis>.</para>

        <figure id="install-stages"><title>SubGit Installation Stages</title>
        <mediaobject><imageobject><imagedata scale="80" fileref="images/install-stages.png"/></imageobject></mediaobject>
        </figure>

        <para>At configuration stage SubGit detects projects and writes down mappings it has found. Then user has a chance to adjust generated
        configuration. At installation stage SubGit performs actual translation of existing Subversion revisions to Git commits and then turns instant synchronization on.
        <xref xrefstyle="select: label" linkend="install-stages"/> schematically shows SubGit installation stages. 
        </para>
        </sect1>
        
        <sect1 id="setup-service-accounts"><title>Setup Service Accounts</title>
        <note><para>This section is only relevant for Linux and OS X users.</para></note>
        
        <para>It is important to plan in advance what service would be used to access Git repositories and what to work with Subversion ones. 
        Usually Subversion service is left intact and one have to configure Git service account so, that files created or modified on its behalf are readable and writable 
        by Subversion service user and vice versa.</para>
        <para>There are basically three possible cases in regards to the services and service accounts. All cases are shown in the diagrams below.</para>
        <figure id="user-same"><title>One service and single user account</title>
        <mediaobject><imageobject><imagedata scale="80" fileref="images/user-same.png"/></imageobject></mediaobject>
        </figure>
        <para>In the most convenient case the same service (Apache HTTP Server) would be used to access both Subversion and Git repositories. Apache HTTP Server user account 
        then would be the only SubGit user (<code>www-data:www-data</code>) as shown in <xref xrefstyle="select: label" linkend="user-same"/>. In this case no 
        changes are needed.</para>

        <figure id="user-same2"><title>Different services ran on behalf of the same user</title>
        <mediaobject><imageobject><imagedata scale="60" fileref="images/user-same2.png"/></imageobject></mediaobject>
        </figure>
        <para>Different services may run on behalf of the same user account as in <xref xrefstyle="select: label" linkend="user-same2"/>. In this case there is still single SubGit user, <code>www-data:www-data</code>
        and no changes have to be made.</para>
        
        <figure id="users-differ"><title>Different services ran on behalf of different users</title>
        <mediaobject><imageobject><imagedata scale="60" fileref="images/users-differ.png"/></imageobject></mediaobject>
        </figure>
        <para>When different services would be used (e.g. SSH for Git and svnserve for Subversion) and ran on behalf of the different service accounts, then <emphasis>each service account must 
        belong to all other accounts primary groups in addition to its own primary group</emphasis>, like it is shown in <xref xrefstyle="select: label" linkend="users-differ"/> where 
        <code>svn:svn</code> user also belongs to the <code>git</code> group and <code>git:git</code> user also belongs to the <code>svn</code> group.</para>
        <para>For instance, in case of the three accounts, they would belong to the following groups:
        <itemizedlist>
        <listitem>service1:service1, service2, service3</listitem>
        <listitem>service2:service2, service1, service3</listitem>
        <listitem>service3:service3, service1, service2</listitem>
        </itemizedlist>
        </para>
        <para>Following commands show how to add user to another account primary group:<literallayout><code>  $ sudo groups svn git
  svn : svn
  git : git
  $ sudo usermod -G svn git
  $ sudo usermod -G git svn
  $ sudo groups svn git
  svn : svn git
  git : git svn</code></literallayout></para>
  
        <para>Alternatively, in <xref xrefstyle="select: label" linkend="users-differ"/> scenario all accounts may share the same primary group.</para>
        <para>To display and change user's primary group one may use the following commands:<literallayout><code>  $ sudo groups git svn
  git : git
  svn :svn
  $ sudo usermod -g svn git
  $ sudo groups git svn
  git : svn
  svn : svn</code></literallayout></para>
  
        <note><title>Service Accounts Summary:</title>
        <para>It is important to ensure that all Subversion and Git repositories that are synchronized by SubGit are either:
        <itemizedlist> <listitem>accessed by the same system user (e.g. www-data:www-data)</listitem>         
    <listitem>accessed by the users who share each other primary group (e.g. svn:svn,<emphasis role="bold">git</emphasis> and git:git,<emphasis role="bold">svn</emphasis>)</listitem>
    <listitem>accessed by the users who share the same primary group (e.g. svn:<emphasis role="bold">svn</emphasis> and git:<emphasis role="bold">svn</emphasis>).</listitem></itemizedlist></para>         
        SubGit configuration that involves multiple user accounts is referred later in this guide as <emphasis role="bold">shared</emphasis>.  
        </note>
        </sect1>
        
        <sect1><title>Run <code>subgit configure</code></title>
        <para>Run SubGit <code>configure</code> command to make SubGit detect projects in Subversion repository and generate initial SubGit configuration for them.
        One have to run <code>configure</code> command on behalf of the same user account that would be used to access Subversion or Git repository. Use
        <code>sudo</code> command on Linux or OS X or Administrator account on Windows if necessary. Examples below assume Linux.</para> 
        <para>When <code>configure</code> command is ran on a repository with a single project one will get the following output:</para>
<literallayout><code>$ [sudo -u www-data] <emphasis role="bold">subgit configure svn_repository</emphasis>
SubGit version 1.0.0 ('Miai') build #1600

Detecting paths eligible for translation... done.
Subversion to Git mapping has been configured:
    <emphasis role="bold">&lt;root&gt; : /var/svn/svn_repository/.git</emphasis>

CONFIGURATION SUCCESSFUL

To complete SubGit installation do the following:

1) adjust SubGit configuration file, if necessary:
    /var/svn/svn_repository/conf/subgit.conf
2) add custom authors mapping to the authors.txt file at:
    /var/svn/svn_repository/conf/authors.txt
3) run SubGit 'install' command:
    subgit install svn_repository</code></literallayout>
        <para>When SubGit <code>configure</code> is ran on repository with two projects, mapping will be displayed for the both detected projects:</para>
<literallayout><code>$ [sudo -u www-data] <emphasis role="bold">subgit configure svn_repository</emphasis>
SubGit version 1.0.0 ('Miai') build #1600

Detecting paths eligible for translation... done.
Subversion to Git mapping has been configured:
    <emphasis role="bold">/project1 : /var/svn/svn_repository/git/project1.git</emphasis>
    <emphasis role="bold">/project2 : /var/svn/svn_repository/git/project2.git</emphasis>

CONFIGURATION SUCCESSFUL
...</code></literallayout>
        <para>At configuration stage SubGit does not actually create Git repositories, but generates configuration file with the information on detected projects
        and mappings. Changes to Subversion repository made by the <code>configure</code> command are shown below:</para>
<literallayout><code>svn_repository/
  conf/
      <emphasis role="bold">authors.txt</emphasis>   # default authors mapping (empty)
      authz
      passwd
      <emphasis role="bold">subgit.conf</emphasis>   # projects mapping and general options
      svnserve.conf
  db/
  hooks/
  locks/
  <emphasis role="bold">subgit/</emphasis>           # subgit binaries, logs and temporary directory
  format
  README.txt</code></literallayout>
        </sect1>

        <sect1><title>Adjust configuration</title>
        <para>SubGit <code>configure</code> command detects projects in Subversion repository and writes configuration and mappings to the <code>SVN_REPOS/conf/subgit.conf</code> file. 
        Generated configuration have to be adjusted or extended when:
        <itemizedlist>
        <listitem>different user accounts will be used to access Subversion and Git repositories (see <xref xrefstyle="select: label" linkend="setup-service-accounts"/>);</listitem>
        <listitem>project in Subversion repository was not detected by <code>subgit configure</code> command.</listitem>
        </itemizedlist>
        <code>subgit.conf</code> file generated for a single-project Subversion repository will look like this (some of the less frequently used options are not shown here):   
        </para>
        <literallayout><code>[core]
    shared = false
    authorsFile = conf/authors.txt

[git "default"]

    translationRoot = /
    repository = .git
    pathEncoding = UTF-8

    trunk = trunk:refs/heads/master
    branches = branches/*:refs/heads/*
    shelves = shelves/*:refs/shelves/*
    tags = tags/*:refs/tags/*
    
    minimalRevision = 0</code></literallayout>
        <note><title>Paths in <code>subgit.conf</code> file:</title><para>File system paths in <code>subgit.conf</code> file could be specified in relative or absolute form. Relative paths are those
        that do not start with '/' or drive letter on Windows OS. Relative paths are treated as relative to the Subversion repository root directory.</para></note>
        <formalpara><title>Enable shared access:</title>
        <para>
        <literallayout><code>[core]
    shared = <emphasis role="bold">true</emphasis></code></literallayout>
        Set <code>core.shared</code> option to <code>true</code> (default is <code>false</code>) if you plan Subversion and Git repositories to be accessed 
        by different user accounts (see <xref xrefstyle="select: label" linkend="setup-service-accounts"/>).</para>
        </formalpara>

        <formalpara><title>Provide authors mapping:</title>
        <para>Write Subversion users to Git authors mapping to <code>conf/authors.txt</code> file (see <xref linkend="authors-mapping"/>). For instance:
        <literallayout><code><emphasis role="bold">conf/authors.txt</emphasis>: 
semen = Semen Vadishev (semen@tmatesoft.com)
dmitry = Dmitry Pavlenko (pavlenko@tmatesoft.com)</code></literallayout></para>
        </formalpara>

        <formalpara><title>Or specify existing authors mapping file:</title>
        <para>
        <literallayout><code>[core]
    ...
    authorsFile = <emphasis role="bold">/var/git/company-authors-mapping.txt</emphasis></code></literallayout>
        Specify path to the authors mapping file (see <xref xrefstyle="select: label" linkend="authors-mapping"/>) as <code>core.authorsFile</code> option value. 
        Path is either relative to the Subversion repository root (e.g. conf/authors.txt expands to SVN_REPOS/conf/authors.txt) or absolute.</para>
        </formalpara>

        <formalpara><title>Adjust Git repository location:</title>
        <para>
        <literallayout><code>[git "default"]
    ... 
    repository = <emphasis role="bold">/var/git/project.git</emphasis></code></literallayout>
        Specify path whether you would like Git repository to be created. By default, Git repositories are created within Subversion repository, at <code>SVN_REPOS/.git</code> in
        a single-project repository and at <code>SVN_REPOS/git/project.git</code> in a multi-project repository. This way allows one to  copy or move Subversion and connected Git 
        repositories with a single filesystem command. Change Git repository path to the one which fits your environment better.</para>
        </formalpara>

        <formalpara><title>Set path encoding to be used in Git repository:</title>
        <para>
        <literallayout><code>[git "default"]
    ...
    pathEncoding = <emphasis role="bold">UTF-8</emphasis></code></literallayout>
        Git stores paths as a sequence of bytes, without enconding specified. Usually paths ends up in Git as-is, i.e. in the local file system enconding.
        Use <code>git.pathEncoding</code> option to specify encoding to use when translating string path found in Subversion repository to Git. 
        Most modern file systems use or could be configured to use UTF-8 encoding and this is default and recommended value.</para>
        </formalpara>

        <formalpara><title>Set revision to start translation from:</title>
        <para>
        <literallayout><code>[git "default"]
    ...
    minimalRevision = <emphasis role="bold">1024</emphasis></code></literallayout>
        Set <code>git.minimalRevision</code> to Subversion revision from which translation should be started. Revisions older than specified 
        would not be translated and would not be present in the Git repository. Limiting range of revisions with this option may reduce initial
        translation time.</para>
        </formalpara>

        <formalpara><title>Add projects that have not being detected automatically:</title>
        <para><literallayout></literallayout>Some projects with non-standard layout may not be detected by SubGit (see <xref linkend="projects-mapping"/> and <xref linkend="branches-mapping"/>). In case it is possible 
        to distinguish trunk, branches and tags directories for those projects one may add them manually to the configuration file.</para>
        <para>Consider the following layout for <code>project</code> and <code>library</code> project:
        <literallayout><code>trunk/
    project/
    library/        
branches/
    project/
    library/
tags/
    project/
    library/</code></literallayout>
    Corresponding <code>[git]</code> sections should be added to <code>subgit.conf</code> file to enable translation 
    and synchronizations of these projects:
        <literallayout><code>[git "project"]
    repository = /var/git/project.git
    
    translationRoot = /

    trunk = trunk/project:refs/heads/master
    branches = branches/project:refs/heads/*
    shelves = shelves/project:refs/shelves/*
    tags = tags/project:refs/tags/*
    
[git "library"]
    repository = /var/git/library.git
    
    translationRoot = /

    trunk = trunk/library:refs/heads/master
    branches = branches/library:refs/heads/*
    shelves = shelves/library:refs/shelves/*
    tags = tags/library:refs/tags/*</code></literallayout>
    Note that <code>git.translationRoot</code> options have similar value in both projects. This option specify a path
    relative to which branches and tags mapping paths are expanded. 
        </para>
        </formalpara>

        </sect1>
        
        <sect1><title>Run <code>subgit install</code></title>
        <para>Run SubGit <code>install</code> command to make SubGit create Git repositories, perform initial translation from Subversion to Git 
        and to enable synchronization.One have to run <code>configure</code> command on behalf of the same user account that would be used to access Subversion or Git repository. Use
        <code>sudo</code> command on Linux or OS X or Administrator account on Windows if necessary. Examples below assume Linux.</para>
         
        <para><code>install</code> command uses configuration previously generated by <code>configure</code> command or perform configuration stage itself in case
        pregenerated configuration is not present. Subgit <code>install</code> command output when run on a single-project Subversion repository is shown below:
<literallayout><code>$ [sudo -u www-data] <emphasis role="bold">subgit install svn_repository</emphasis>
SubGit version 1.0.0 ('Miai') build #1600

Subversion to Git mapping has been found:
    <emphasis role="bold">&lt;root&gt; : /var/svn/svn_repository/.git</emphasis>

Translating Subversion revisions to Git commits...

    Subversion revisions translated: 20.
    Total time: 10 seconds.

INSTALLATION SUCCESSFUL</code></literallayout>
        Inital translation may take a while, however it would not affect Subversion repository - it remains fully functional during initial translation time.</para>
        <para>SubGit <code>install</code> command creates Git repository and enables synchronization by installing hooks. Existing Subversion <code>pre-commit</code> and 
        <code>post-commit</code> hooks are preserved and executed normally. 
<literallayout><code>svn_repository/
  <emphasis role="bold">.git/</emphasis>
    branches/
    hooks/
        <emphasis role="bold">pre-receive</emphasis>
        <emphasis role="bold">user-pre-receive.sample</emphasis>
        <emphasis role="bold">post-receive</emphasis>
        <emphasis role="bold">user-post-receive.sample</emphasis>
    logs/
    objects/
    refs/
    svn/
    config
    HEAD            
  conf/
  db/
  hooks/
    <emphasis role="bold">pre-commit</emphasis>
    <emphasis role="bold">user-pre-commit</emphasis>
    <emphasis role="bold">post-commit</emphasis>  
    <emphasis role="bold">user-post-commit</emphasis>
  locks/
  subgit/
  format
  README.txt</code></literallayout>
  As soon as <code>install</code> command reports successful termination, commits to Subversion repository will be immediately translated to the 
  corresponding Git repository and vice versa - pushes to Git repository from its clones will be immideately translated to Subversion repository. 
  With SubGit no special actions are required to maintain Subversion and Git repositories synchronized.
        </para>
     
        </sect1>
        <sect1><title>Recommended client-side Git configuration</title>
        <para>Git users will clone Git repository on the server side to start working with the project locally.
        There are number of configuration options that is recommended to add to the clone's <code>.git/config</code> configuration file.
        These options are not required, but merely recommended for better user experience.</para>
        <literallayout><code><emphasis role="bold">.git/config file:</emphasis>
...
[merge]
    ff = false            
[fetch "origin"]
    ...
    fetch += +refs/svn/map:refs/notes/commits
    ...
    tagopt = '--tags'
        </code></literallayout>
        <formalpara><title>Disable fast forward merges:</title>
        <para>
        <literallayout><code>[merge]
    ff = <emphasis role="bold">false</emphasis></code></literallayout>
    <para>Or, for Git 1.7.5 or older (for each branch):</para>
    <literallayout><code>[branch "master"]
    mergeoptions = <emphasis role="bold">'--no-ff'</emphasis></code></literallayout>
        With fast-forward merges disabled, Git will always create merge commit for a merge. SubGit translation
        engine benefits from the presense of such commits and translates them to the most reasonable merge tracking
        information. When merge is fast-forward, SubGit translation engine will merely replace branch with its ancestor
        at certain revision and no merge tracking information would be created.</para>
        </formalpara>

        <formalpara><title>Fetch SubGit mapping information:</title>
        <para>
        <literallayout><code>[remote "origin"]
    ...
    <emphasis role="bold">fetch += +refs/svn/map:refs/notes/commits</emphasis></code></literallayout>
        <code>refs/notes/commmits</code> reference points to the so called notes that contains Subversion to Git 
        mapping information for each commit. With these notes fetched <code>git log</code> command will show
        mapping information alongside with the commit message in the log output:
        <literallayout><code>$ git log
commit bee5c8ae9bd8b2077f1acaedc9982ab4bd84d91b
Author: Alexander Kitaev &lt;kitaev@tmatesoft.com&gt;
Date:   Thu Sep 6 18:58:01 2012 +0200

    Ugly bug fixed

<emphasis role="bold">Notes:
    r1 trunk</emphasis></code></literallayout>
        </para>
        </formalpara>

        <formalpara><title>Fetch all tags:</title>
        <para>
        <literallayout><code>[remote "origin"]
    ...
    <emphasis role="bold">tagopts = '--tags'</emphasis></code></literallayout>
        <code>--tags</code> option will force Git to fetch all tags, even those unreachable
        from the current branch. These may be convenient in case user would like to see 
        or check out tag set on the other branch.
        </para>
        </formalpara>

        </sect1>
    </chapter>

    <chapter id="modify">
        <title>Changing SubGit Configuration</title>
        
        <sect1><title>Writing Hooks</title>
        </sect1>
        
        <sect1><title>Applying configuration changes</title>
        </sect1>
    </chapter>

    <chapter id="uninstall">
        <title>Uninstalling SubGit</title>
    </chapter>
    
    <chapter id="registration">
        <title>Registering SubGit</title>
    </chapter>

    <chapter id="backup">
        <title>Backup</title>
    </chapter>

    <chapter id="recovery">
        <title>Error Recovery</title>
    </chapter>

    <chapter id="reference">
        <title>SubGit Reference</title>
        <sect1>
        <title>SubGit Files</title>
        </sect1>
        <sect1>
        <title>Configuration Options</title>
        </sect1>
        <sect1>
        <title>Command Line Reference</title>
        </sect1>
    </chapter>

    <chapter id="linux-apache">
        <title>Subversion and Git over HTTP with Apache Web Server</title>
    </chapter>
    <chapter id="linux-ssh">
        <title>Subversion and Git over SSH protocol</title>
    </chapter>
    <chapter id="linux-shared">
        <title>Subversion over SSH and Git over HTTP protocol</title>
    </chapter>
    <chapter id="linux-issues">
        <title>Troubleshooting SubGit on Linux / OS X</title>
    </chapter>
    
    <chapter id="windows">
        <title>Installing SubGit on Windows</title>
    </chapter>
    <chapter id="windows-visualsvn">
        <title>SubGit with VisualSVN</title>
    </chapter>
    <chapter id="windows-ubersvn">
        <title>SubGit with WANDisco uberSVN on Windows</title>
    </chapter>
    <chapter id="windows-issues">
        <title>Troubleshooting SubGit on Windows</title>
    </chapter>

</book>
