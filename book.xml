<?xml version="1.0"?>
<book xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0">
    <bookinfo>
        <title>Practical Guide To SubGit</title>
        <subtitle>Safe Svn to Git Migration</subtitle>
        <releaseinfo/>
        <copyright>
            <year>2012</year>
            <holder>TMate Software</holder>
        </copyright>
        <legalnotice>
            <para>This work is licensed under a <link xl:href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</link>.
            </para>
        </legalnotice>
        <author>
            <firstname>Alexander</firstname>
            <surname>Kitaev</surname>
        </author>
    </bookinfo>   

    
    <chapter id="introduction">
        <title>Overview</title>
        <para>SubGit is a tool for bidirectional Subversion and Git repositories synchronization. 
              SubGit is written in Java and works on the server side, i.e. requires direct access to both Subversion and Git repositories over local file system.
        </para>
        <para>Most commonly, SubGit user starts with Subversion repository being configured on the server. 
              Access to Subversion repository is availaibe over network (with HTTP(s), plain svn or svn over SSH protocols) and over the local file system. 
              Correspondingly, users requests are handled by Apache Web Server, svnserve daemon or sshd daemon which invokes svnserve process. 
              <xref xrefstyle="select: label" linkend="start"/> shows a generic outline of the described configuration.
       </para>               
       <para>           
           <figure id="start"><title>Common Subversion Setup</title>
           <mediaobject><imageobject><imagedata scale="105" fileref="images/start.png"/></imageobject></mediaobject>
           </figure>
        </para>
        <para>SubGit creates one or more Git repositories alongside with the existing Subversion repository and translates existing Subversion revisions into Git 
              commits. After that, SubGit configures Subversion and Git hook scripts so, that changes made in the Subversion repository are instantly translated 
              into Git repository and vice versa. <xref xrefstyle="select: label" linkend="subgit"/> shows the server with SubGit being installed. 
              SubGit grants users with a choice of using either Git or Subversion.
        </para> 
        <para>
           <figure id="subgit"><title>Server with SubGit installed</title>
           <mediaobject><imageobject><imagedata scale="115" fileref="images/subgit.png"/></imageobject></mediaobject>
           </figure>
        </para>
        <formalpara><title>Chapter summary:</title>
        <para>
        <itemizedlist>
        <listitem>SubGit needs direct access to Subversion repository over filesystem</listitem>
        <listitem>SubGit creates Git repositories and translates existing Subversion revisions into Git commits</listitem>
        <listitem>SubGit uses standard hooks mechanism to keep Subversion and Git repositories synchronized</listitem>
        <listitem>SubGit grants users with a choice of whether to use Git or Subversion</listitem>
        </itemizedlist>
        </para>
        </formalpara>
    </chapter>

    <chapter id="translation">
        <title>Translation Configuration Overview</title>
        <para>To synchronize Subversion and Git repositories, SubGit maps entities of one system to those of another. 
        For every Subversion repository the following mappings are established and used by SubGit: 
        <itemizedlist>
        <listitem>Projects in Subversion repository are mapped to the Git repositories</listitem>
        <listitem>Each project branches and tags are mapped to Git branch and tag references</listitem>
        <listitem>Subversion users are mapped to Git committers</listitem>
        </itemizedlist>
        Above mappings are static and configured for Subversion repository once before translation and synchronization is started. 
        All mappings are stored in <code>subgit.conf</code> configuration file. Following sections describe these mappings in more details.
        </para>

        <note><title>Note:</title>
        <para>
        Subversion is a very powerful system and sets mostly no limits on the repository layout. Hence, it may not be always possible to define necessary mappings 
        for any project stored in Subversion repository found out there in the wild. Such unmappable projects would not be handled by SubGit. 
        However, for most of the Subversion repositories in production use, mappings could be defined and, in most cases,
        they are detected automatically by SubGit. 
        </para>
        </note>

        <sect1><title>Projects mapping</title>
        <para>  
        Subversion repository may contain one or more projects. Project is a location (folder) in Subversion repository which follows Subversion recommended repository
        layout, i.e. project folder has <emphasis>trunk</emphasis>, <emphasis>branches</emphasis> and <emphasis>tags</emphasis> subfolders:
        <literallayout><code>/project
   /trunk    # project's "main line"
   /branches # contains project feature and version branches, copied from trunk or other branches
   /tags     # contains project tags (trunk and branches snapshots)</code></literallayout>
        It is not necessary for <emphasis>trunk</emphasis>, <emphasis>branches</emphasis> and <emphasis>tags</emphasis> folders to have these exact names, but the roles 
        of these folders are important. Each project could be mapped to a bare Git repository as shown
        in <xref xrefstyle="select: label" linkend="single"/> and <xref xrefstyle="select: label" linkend="multi"/> along with the corresponding 
        parts of SubGit configuration file.  
        <figure id="single"><title>Single Project Repository Mapping</title>
        <mediaobject><imageobject><imagedata scale="105" fileref="images/single.png"/></imageobject></mediaobject>
        </figure>
        <figure id="single-config"><title>SubGit configuration file (single project mapping)</title>
        <literallayout><code>        [git "default"]
        # project location within Subversion repository
        translationRoot = /
        
        # file system path of the mapped Git repository
        repository = .git</code></literallayout>
        </figure>
        <figure id="multi"><title>Multiple Projects Repository Mapping</title>
        <mediaobject><imageobject><imagedata scale="105" fileref="images/multi.png"/></imageobject></mediaobject>
        </figure>
        <figure id="multi-config"><title>SubGit configuration file (two projects mapping)</title>
        <literallayout><code>        [git "project1"]
        # project location within Subversion repository
        translationRoot = /project1
        
        # file system path of the mapped Git repository
        repository = git/project1.git
        ...
        
        [git "project2"]
        # project location within Subversion repository
        translationRoot = /project2
        
        # file system path of the mapped Git repository
        repository = git/project2.git</code></literallayout>
        </figure>
        </para></sect1>

        <sect1><title>Branches and Tags mapping</title>
        <para>
        For each project mapped to a Git repository, branches and tags are mapped to the corresponding references in the Git repository.
        SubGit distinguishes the following folders in Subversion project as branches or tags:
        <itemizedlist>
        <listitem>trunk folder</listitem>
        <listitem>folders in the dedicated branches folder</listitem>
        <listitem>folders in the dedicated shelves folder</listitem>
        <listitem>folders in the dedicated tags folder</listitem>
        </itemizedlist>
        </para>
        <para>Shelves are special kind of branches used by SubGit to represent Git anonymous branches in Subversion repository.</para>
        <para>
        Each folder is mapped to the reference (branch or tag) in the Git repository. For trunk folder the mapping is one-to-one as there 
        could be only one trunk folder (as well as only one master reference in Git) and for other folders wildcard mapping is used. Default mapping and 
        corresponding SubGit configuration file part is shown in <xref xrefstyle="select: label" linkend="mapping"/>  and <xref xrefstyle="select: label" linkend="mapping-config"/>.
        </para>
        <para>Whenever project uses standard folder names (i.e. trunk, branches and tags), SubGit would automatically detect and configure mapping for that project. Otherwise
        configuration would have to be manually adjusted to include proper paths and references names.</para>
        <para>  
        <figure id="mapping"><title>Default Branches and Tags Mapping</title>
        <mediaobject><imageobject><imagedata scale="80" fileref="images/mapping.png"/></imageobject></mediaobject>
        </figure>
        <figure id="mapping-config"><title>SubGit configuration file (default branches and tags mapping)</title>
        <literallayout><code>        [git "default"]
        translationRoot = /
        repository = .git
        
        # branches and tags mapping in form of
        # branchKind=Subversion-Path-Pattern:Git-Reference-Pattern
        
        trunk = trunk:refs/heads/master
        branches = branches/*:refs/heads/*
        shelves = shelves/*:refs/shelves/*
        tags = tags/*:refs/tags/*</code></literallayout>
        </figure>
        </para>
        <para>  
        Notice that project2 in <xref xrefstyle="select: label" linkend="multi"/> features
        non-standard names for <emphasis>trunk</emphasis>, <emphasis>branches</emphasis> and <emphasis>tags</emphasis> folders. <xref xrefstyle="select: label" linkend="mapping-names"/> shows
        mapping configuration for that project.
        <figure id="mapping-names"><title>SubGit configuration file (non-stadard folders names)</title>
        <literallayout><code>        [git "default"]
        translationRoot = /
        repository = .git
        
        # branches and tags mapping in form of
        # branchKind=Subversion-Path-Pattern:Git-Reference-Pattern
        
        trunk = main:refs/heads/master
        branches = versions/*:refs/heads/*
        shelves = shelves/*:refs/shelves/*
        tags = stamps/*:refs/tags/*</code></literallayout>
        </figure>
        </para>
        <para><xref xrefstyle="select: label" linkend="multi-combined"/> outlines combined project and branches mappings for two projects Subversion repository.   
        <figure id="multi-combined"><title>Project and Branches Mapping</title>
        <mediaobject><imageobject><imagedata scale="105" fileref="images/multi-combined.png"/></imageobject></mediaobject>
        </figure>
        </para>
        </sect1>
        
        <sect1><title>Authors Mapping</title>
        <para>By default there is no explicit authors mapping and the following rules are used for translation:
        <itemizedlist>
        <listitem>Subversion "<code>svn_user_name</code>" is translated to "<code>svn_user_name &lt;&gt;</code>" in Git</listitem>
        <listitem>Git "<code>Author Name &lt;email@domain.com&gt;</code>" is translated to "<code>Author Name</code>" in Subversion</listitem>
        </itemizedlist>
        </para>
        
        <para>
        Additionally to the default rule, explicit authors mapping may be provided by SubGit configuration. Authors mapping is stored in a separate 
        text file which is looked at <code>SVN_REPOS/conf/authors.txt</code> by default. Mapping file is read in system default encoding.   
        <figure id="authors.txt"><title>SVN_REPOS/conf/authors.txt file</title>
        <literallayout><code>svn_user_name = Git Name &lt;name@email.com&gt;</code></literallayout></figure>
        Default authors.txt location may be changed in SubGit configuration file. 
        <figure id="authors.txt"><title>SubGit configuration file defines authors.txt location</title>
        <literallayout><code>        [core]
        ...
        # location of the authors mapping file        
        authorsFile = conf/authors.txt
        ...</code></literallayout></figure>
        Authors mapping file (authors.txt) contents may be altered at any time and new mapping becomes effective immediately. 
        </para>        
        </sect1>
    </chapter>

    <chapter id="installation">
        <title>Installing SubGit into Repository</title>
        
        <sect1><title>Installation Stages</title>
        <para>To translate Subversion repository to Git and enabled synchronization, SubGit have to be installed into Subversion repository.
        SubGit installation consists of two stages: <emphasis role="bold">configuration</emphasis> and <emphasis role="bold">installation</emphasis>.</para>
        <para>At configuration stage SubGit detects projects and writes down mappings it has found. Then user has a chance to adjust generated
        configuration. At installation stage SubGit performs actual translation of existing Subversion revisions to Git commits and then turns instant synchronization on.
        <xref xrefstyle="select: label" linkend="install-stages"/> schematically shows SubGit installation stages. 
        </para>
        <figure id="install-stages"><title>SubGit Installation Stages</title>
        <mediaobject><imageobject><imagedata scale="80" fileref="images/install-stages.png"/></imageobject></mediaobject>
        </figure>
        </sect1>
        
        <sect1><title>Setup Service Accounts</title>
        <note><para>This section is only relevant for Linux and OS X users.</para></note>
        
        <para>It is important to plan in advance what service would be used to access Git repositories and what to work with Subversion ones. 
        Usually Subversion service is left intact and one have to configure Git service account so, that files created or modified on its behalf are readable and writable 
        by Subversion service user and vice versa.</para>
        <para>In most convenient case the same service (Apache HTTP Server) would be used to access both Subversion and Git repositories. Apache HTTP Server user account 
        then would be the only SubGit user (<code>www-data:www-data</code>) as shown in <xref xrefstyle="select: label" linkend="user-same"/>.</para>
        <figure id="user-same"><title>One service and single user account</title>
        <mediaobject><imageobject><imagedata scale="80" fileref="images/user-same.png"/></imageobject></mediaobject>
        </figure>
        
        <para>Different services may run on behalf of the same user account as in <xref xrefstyle="select: label" linkend="user-same2"/>. In this case there is still single SubGit user, <code>www-data:www-data</code>.</para>

        <figure id="user-same2"><title>Different services ran on behalf of the same user</title>
        <mediaobject><imageobject><imagedata scale="60" fileref="images/user-same2.png"/></imageobject></mediaobject>
        </figure>
        
        <para>When different services are used (e.g. SSH for Git and svnserve for Subversion) and are ran on behalf of different accounts, then <emphasis>all these accounts must share
        the same primary group</emphasis>, like shown in <xref xrefstyle="select: label" linkend="users-differ"/>. Both <code>svn</code> and <code>git</code> accounts are in the same <code>svn</code> group.</para>

        <figure id="users-differ"><title>Different services ran on behalf of different users</title>
        <mediaobject><imageobject><imagedata scale="60" fileref="images/users-differ.png"/></imageobject></mediaobject>
        </figure>
        
        <para>To display and change user's primary group one may use the following commands:<literallayout><code>  $ sudo groups git
  git : git
  $ sudo usermod -g www-data git
  $ sudo groups git
  git : www-data</code></literallayout></para>
  <note><title>Service Accounts Summary:</title>
  <para>It is important to ensure that either all Subversion and Git repositories that are synchronized by SubGit are accessed by the same system user (e.g. www-data:www-data) OR that 
  all accessing users share the same primary group (e.g. svn:svn and git:svn).</para></note>
        </sect1>
        
        <sect1><title>Run <code>subgit configure</code></title>
        <para>To detect projects stored in Subversion repository and generate corresponding SubGit configuration, <code>configure</code> command is used.
        When ran on a repository with a single project one will get the following output:</para>
<literallayout><code>$ <emphasis role="bold">subgit configure svn_repository</emphasis>
SubGit version 1.0.0 ('Miai') build #1600

Detecting paths eligible for translation... done.
Subversion to Git mapping has been configured:
    <emphasis role="bold">&lt;root&gt; : /var/svn/svn_repository/.git</emphasis>

CONFIGURATION SUCCESSFUL

To complete SubGit installation do the following:

1) adjust SubGit configuration file, if necessary:
    /var/svn/svn_repository/conf/subgit.conf
2) add custom authors mapping to the authors.txt file at:
    /var/svn/svn_repository/conf/authors.txt
3) run SubGit 'install' command:
    subgit install svn_repository</code></literallayout>
        <para>When SubGit <code>configure</code> is ran on repository with two projects, mapping will be displayed for the both detected projects:</para>
<literallayout><code>$ <emphasis role="bold">subgit configure svn_repository</emphasis>
SubGit version 1.0.0 ('Miai') build #1600

Detecting paths eligible for translation... done.
Subversion to Git mapping has been configured:
    <emphasis role="bold">/project1 : /var/svn/svn_repository/git/project1.git</emphasis>
    <emphasis role="bold">/project2 : /var/svn/svn_repository/git/project2.git</emphasis>

CONFIGURATION SUCCESSFUL
...</code></literallayout>
        <para>At configuration stage SubGit does not actually create Git repositories, but generates configuration file with the information on detected projects
        and mappings. Changes to Subversion repository made by the <code>configure</code> command are shown below:</para>
<literallayout><code>svn_repository/
  conf/
      <emphasis role="bold">authors.txt</emphasis>   # default authors mapping (empty)
      authz
      passwd
      <emphasis role="bold">subgit.conf</emphasis>   # projects mapping and general options
      svnserve.conf
  db/
  hooks/
  locks/
  <emphasis role="bold">subgit/</emphasis>           # subgit binaries, logs and temporary directory
  format
  README.txt</code></literallayout>
        <para>Notice that SubGit binaries are installed into repository, thus moving repository around, would not affect synchronization.</para>
        </sect1>

        <sect1><title>Adjust configuration</title>
        </sect1>
        
        <sect1><title>Run <code>subgit install</code></title>
        </sect1>
    </chapter>

    <chapter id="modify">
        <title>Changing SubGit Configuration</title>
    </chapter>

    <chapter id="backup">
        <title>Backup</title>
    </chapter>

    <chapter id="recovery">
        <title>Error Recovery</title>
    </chapter>

    <chapter id="reference">
        <title>SubGit Reference</title>
        <sect1>
        <title>SubGit Files</title>
        </sect1>
        <sect1>
        <title>Configuration Optinons</title>
        </sect1>
        <sect1>
        <title>Command Line Reference</title>
        </sect1>
    </chapter>

    <chapter id="linux-apache">
        <title>Subversion and Git over HTTP with Apache Web Server</title>
    </chapter>
    <chapter id="linux-ssh">
        <title>Subversion and Git over SSH protocol</title>
    </chapter>
    <chapter id="linux-shared">
        <title>Subversion over SSH and Git over HTTP protocol</title>
    </chapter>
    <chapter id="linux-issues">
        <title>Troubleshooting SubGit on Linux / OS X</title>
    </chapter>
    
    <chapter id="windows">
        <title>Installing SubGit on Windows</title>
    </chapter>
    <chapter id="windows-visualsvn">
        <title>SubGit with VisualSVN</title>
    </chapter>
    <chapter id="windows-ubersvn">
        <title>SubGit with WANDisco uberSVN on Windows</title>
    </chapter>
    <chapter id="windows-issues">
        <title>Troubleshooting SubGit on Windows</title>
    </chapter>
    
    <chapter id="registration">
        <title>SubGit Registration</title>
    </chapter>

</book>
